
#+TITLE: GNU Emacs flavors combined
#+AUTHOR: Group work

* What is GNU?
+ [[./images/gnu.jpeg]]
+ GNU is a recursive acronym for "GNU is Not is Unix". Recursive acronym is a type of acronym that refers to its self.
+ Other examples familiar in Linux world:
  - PHP: PHP hypertext preprocessor
  - PIP: Pip installs package
+ One of the prominent products of GNU project is Emacs(Editor Macros) text editor.
  
  
* Emacs for Writers, Researchers and Planners
** Org mode
- Emacs Org mode is a powerful and flexible system for note-taking, task management, authoring, and project planning within the GNU Emacs editor. It provides a structured plain text file format, allowing users to create and manage complex documents, outlines, and lists in a fast and effective way.
- Key benefits of emacs org mode?
  + Streamline note taking experience
  + Managing your TODO(C-c C-t) lists with checkbox, and archiving them
    - creating schedule C-c C-s
    - Creating deadline C-c C-d
  + Executing different programming languages within a text
  + Links to websites (to create using C-c C-l and to that website using C-c C-o) and linking to your own files.(for files you need to put the file first in the link buffer by hitting C-c l on beginning of file name, for creating a link is C-c C-l)
  + Managing your file using dired(C-x d) m for marking u for unmarking D for deleting, R for renaming ...
  + Exporting your note, plan or outline to different formats
- Let's go to demo...


* For Developers
** Magit
- Check if it is installed M-x magit-version RET
- Type C-x g to display information about the current git repository in a dedicated buffer, called the status buffer. Most git commands are commonly invoked from the status buffer.
- Move between sections using p and n. Type TAB to expand or collapse the section at a point. You can also use C-tab to cycle the visibility of the current section and its children.
- type *s* to stage the changes you made to a file and *u* to unstage a file.
- and then to commit your changes, type *c*. Then write a message and then type C-c C-c to actually create the commit.
- What about to push just type *P* to show all the available push commands and arguments and then *p* to push to a branch with the same name as local branch onto the remote configured as the push-remote.(If the push-remote is not configured yet, then you will first be prompted for the remote to push to).
  
- To add remote where to push on magit:
  Open your terminal then 
  1) git remote add origin https://github.com/your-repo-url.git
  2) git branch -M main
  3) type P followed by p

Here are some of the basic Magit commands and their corresponding Git commands:

|------------------------+-------------------------|
| Git commands           | Magit commands          |
|                        | (on magit-status)       |
|------------------------+-------------------------|
| git status             | C-x g                   |
|------------------------+-------------------------|
| git add <file>         | s(magit-stage-file)     |
|------------------------+-------------------------|
| git commit -m "msg"    | c c                     |
|------------------------+-------------------------|
| git push               | P p(push-current)       |
|------------------------+-------------------------|
| git pull               | F p(pull-from-upstream) |
|------------------------+-------------------------|
| git branch             | b b                     |
|------------------------+-------------------------|
| git checkout <branch>  | b c                     |
|------------------------+-------------------------|
| git merge <branch>     | m m                     |
|------------------------+-------------------------|
| git branch -d <branch> | b d                     |
|------------------------+-------------------------|
| git log                | l l                     |
|------------------------+-------------------------|
| git diff               | d d                     |
|------------------------+-------------------------|
| git clone <url>        | c l                     |
|------------------------+-------------------------|
** HTML developer
+ Creating check box C-c C-c c
+ Creaging radio button C-c C-c r
+ ordered list C-c C-c o
+ unordered list C-c C-c u
+ list item C-c C-c l
+ tagging
  .....


** EXWM
- Using emacs as your main windows manager
- To boot to exwm first create a desktop application
  
[Desktop Entry]
Name=EXWM
Exec=sh /home/ertale/.emacs.d/exwm/start-exwm.sh
TryExec=sh
Type=Application
X-LightDM-DesktopName=exwm
DesktopName=exwm

- Then create a link to /usr/share/xsession

- You can work by creating frames, windows,
  ..
- To create new window C-x 4 f and C-x 5 f for frame
- Switch to buffers via normal commands.
- another command for switching buffer:
  M-x exwm-workspace-switch-to-buffer
